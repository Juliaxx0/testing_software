def all_sum(data):
    # Конкатенирует все элементы списка, приводя их к строкам.
    result = ''
    for i in data:
        result += str(i)
    return result


# Первое тестирование: проверьте, корректно ли сработает функция all_sum(),
# если ей на вход передать список из целых и дробных чисел.

mixed_numbers = [2, 3.4, 5, 4, 6.7]  # Список из int и float.
result_numbers = '23.4546.7'  # Ожидаемый результат,  который должна вернуть функция all_sum().


# Вместо многоточия напишите утверждение, которое должно быть проверено.
assert result_numbers == all_sum(mixed_numbers), (
    'Функция all_sum() некорректно обрабатывает смешанный список из int и float.'
)

# Второе тестирование: проверьте, корректно ли сработает функция all_sum(),
# если ей на вход передать список из чисел и строк.

mixed_numbers_strings = [4, 6, '7', '99', 8]  # Cписок из чисел и строк.
result_numbers_strings = '467998'  # Ожидаемый результат, который должна вернуть all_sum().

# Вместо многоточия напишите утверждение, которое должно быть проверено.
assert result_numbers_strings == all_sum(mixed_numbers_strings), (
    'Функция all_sum() некорректно обрабатывает смешанный список из чисел и строк.'
)

# Третье тестирование: проверьте, корректно ли сработает функция all_sum(),
# если ей на вход передать пустой список.
empty = []  # Пустой список.
result_empty = ''  # Ожидаемый результат, который должна вернуть all_sum().

# Вместо многоточия напишите утверждение, которое должно быть проверено.
assert result_empty == all_sum(empty), (
    'Функция all_sum() некорректно обрабатывает пустой список'
)
